# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
jobs:
- job: build/test
  trigger:
  - master

  pool:
    vmImage: 'vs2017-win2016'

  variables:
    buildConfiguration: 'Release'
    POSTMATES_CUSTOMER_ID: '$(postmates.customerId)'
    POSTMATES_SIGNATURE_SECRET: '$(postmates.signatureSecret)'
    Major: '1'
    Minor: '0'
    Patch: '0'
  steps: 
  - task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.1'
  inputs:
    versionSpec: 4.9.1

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      arguments: '--configuration $(buildConfiguration)'

  #- task: DotNetCoreCLI@2
   #  env: { "POSTMATES_CUSTOMER_ID": '$(postmates.customerId)', "POSTMATES_SIGNATURE_SECRET": '$(postmates.signatureSecret)' }
  #  inputs:
  #    command: test
  #    projects: '**/Test.*.csproj'
  #    arguments: '--configuration $(buildConfiguration)'
  

- job: release
  trigger:
  - master

  pool:
    vmImage: 'vs2017-win2016'

  variables:
    buildConfiguration: 'Release'
    POSTMATES_CUSTOMER_ID: '$(postmates.customerId)'
    POSTMATES_SIGNATURE_SECRET: '$(postmates.signatureSecret)'
    Major: '1'
    Minor: '0'
    Patch: '0'
  steps: 
  - task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.1'
  inputs:
    versionSpec: 4.9.1

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      arguments: '--configuration $(buildConfiguration)'

  #- task: DotNetCoreCLI@2
   #  env: { "POSTMATES_CUSTOMER_ID": '$(postmates.customerId)', "POSTMATES_SIGNATURE_SECRET": '$(postmates.signatureSecret)' }
  #  inputs:
  #    command: test
  #    projects: '**/Test.*.csproj'
  #    arguments: '--configuration $(buildConfiguration)'
  - task: NuGetCommand@2
    inputs:
      command: pack
      packagesToPack: '**/Postmates.NET.csproj'
      configuration: '$(BuildConfiguration)'
      packDestination: '$(Build.ArtifactStagingDirectory)'
      versioningScheme: byBuildNumber
      majorVersion: '$(Major)'
      minorVersion: '$(Minor)'
      patchVersion: '$(Patch)'

  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      publishFeedCredentials: 'nuget'
      versioningScheme: byBuildNumber
      majorVersion: '$(Major)'
      minorVersion: '$(Minor)'
      patchVersion: '$(Patch)'

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), not(eq(variables['Build.Reason'], 'PullRequest')))

